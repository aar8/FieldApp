//
//  AppDatabase+Sync.generated.swift
//  FieldAppPrime
//
//  Created by Gemini on 10/30/25.
//
// This file is generated by the schema-codegen script. Do not edit manually.

import Foundation
import GRDB

// This extension is generated to provide sync-related database operations.
extension DefaultDatabaseService {

    /**
     Performs an "upsert" (insert or update) for all records in a `SyncResponse`.
    
     This method iterates through all the record arrays in the `SyncResponse.data` payload
     and saves each record to the database within a single transaction. If any
     record fails to save, the entire transaction is rolled back.
    
     - Parameter syncResponse: The `SyncResponse` containing arrays of records to save.
     - Returns: A `Result` indicating success (`.success`) or failure (`.failure(Error)`).
     */
    func upsert(syncResponse: SyncResponse) -> Result<Void, Error> {
        do {
            try dbQueue.writeInTransaction { db in
                try syncResponse.data.users.forEach { try $0.save(db) }
                try syncResponse.data.customers.forEach { try $0.save(db) }
                try syncResponse.data.jobs.forEach { try $0.save(db) }
                try syncResponse.data.calendarEvents.forEach { try $0.save(db) }
                try syncResponse.data.pricebooks.forEach { try $0.save(db) }
                try syncResponse.data.products.forEach { try $0.save(db) }
                try syncResponse.data.locations.forEach { try $0.save(db) }
                try syncResponse.data.productItems.forEach { try $0.save(db) }
                try syncResponse.data.pricebookEntries.forEach { try $0.save(db) }
                try syncResponse.data.jobLineItems.forEach { try $0.save(db) }
                try syncResponse.data.quotes.forEach { try $0.save(db) }
                try syncResponse.data.objectFeeds.forEach { try $0.save(db) }
                try syncResponse.data.invoices.forEach { try $0.save(db) }
                try syncResponse.data.invoiceLineItems.forEach { try $0.save(db) }
                try syncResponse.data.objectMetadata.forEach { try $0.save(db) }
                try syncResponse.data.layoutDefinitions.forEach { try $0.save(db) }

                return .commit
            }
            return .success(())
        } catch {
            return .failure(error)
        }
    }
}
